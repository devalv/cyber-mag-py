[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true


[tool.ruff]
preview = true # (E271,E203) https://docs.astral.sh/ruff/preview/

lint.unfixable = [
    "ERA", # do not autoremove commented out code
]

exclude = [
    ".git",
    "__pycache__",
]

lint.ignore = [
    "A001", # Variable {name} is shadowing a Python builtin
    "A002", # Argument {name} is shadowing a Python builtin
    "A003", # Class attribute {name} is shadowing a Python builtin
    "B012", # {name} inside finally blocks cause exceptions to be silenced
    "E501", # Line too long ({width} > {limit} characters)
    "B904", # raise-without-from-inside-except
    "E203", # Whitespace before '{symbol}'
    "F841", # assigned to but never used

]

lint.select = [
    "A", # same flake8-builtins
    "B", # same flake8-bugbear
    "E", # pycodestyle
    "F", # pyflakes
    "W", # pycodestyle
    "E271", # Multiple spaces after keyword
    "ERA", # flake8-eradicate/eradicate
    "I", # same isort
    "T20",  # flake8-print
]

# Same as Black.(for future format in ruff)
line-length = 120

# Assume Python 3.12
target-version = "py312"

[tool.ruff.format]
# Like Black, use single quotes for strings.
quote-style = "single"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.poetry]
name = "cyber-mag-py"
version = "0.1.0"
description = ""
authors = ["Aleksey Devyatkin <aleksei@devyatkin.dev>"]
license = "LICENSE"
readme = "README.md"
package-mode = false


[tool.poetry.dependencies]
python = "^3.12"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.3"
pytest-cases = "^3.8.6"
pytest-xdist = "^3.6.1"
pyfakefs = "^5.7.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
